{
  "openapi": "3.1.0",
  "info": {
    "title": "OpenAI Assistants API",
    "version": "0.1.0"
  },
  "paths": {
    "/v1/assistants": {
      "post": {
        "tags": [
          "assistants"
        ],
        "summary": "Create Assistant",
        "operationId": "create_assistant_v1_assistants_post",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAssistantRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIAssistant"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "assistants"
        ],
        "summary": "List Assistants",
        "operationId": "list_assistants_v1_assistants_get",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "How many assistants to retrieve.",
              "default": 1000,
              "title": "Limit"
            },
            "description": "How many assistants to retrieve."
          },
          {
            "name": "order",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Order of assistants to retrieve (either 'asc' or 'desc').",
              "default": "asc",
              "title": "Order"
            },
            "description": "Order of assistants to retrieve (either 'asc' or 'desc')."
          },
          {
            "name": "after",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "A cursor for use in pagination. `after` is an object ID that defines your place in the list.",
              "title": "After"
            },
            "description": "A cursor for use in pagination. `after` is an object ID that defines your place in the list."
          },
          {
            "name": "before",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "A cursor for use in pagination. `after` is an object ID that defines your place in the list.",
              "title": "Before"
            },
            "description": "A cursor for use in pagination. `after` is an object ID that defines your place in the list."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OpenAIAssistant"
                  },
                  "title": "Response List Assistants V1 Assistants Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/assistants/{assistant_id}/files": {
      "post": {
        "tags": [
          "assistants"
        ],
        "summary": "Create Assistant File",
        "operationId": "create_assistant_file_v1_assistants__assistant_id__files_post",
        "parameters": [
          {
            "name": "assistant_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The unique identifier of the assistant.",
              "title": "Assistant Id"
            },
            "description": "The unique identifier of the assistant."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAssistantFileRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssistantFile"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "assistants"
        ],
        "summary": "List Assistant Files",
        "operationId": "list_assistant_files_v1_assistants__assistant_id__files_get",
        "parameters": [
          {
            "name": "assistant_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The unique identifier of the assistant.",
              "title": "Assistant Id"
            },
            "description": "The unique identifier of the assistant."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "How many files to retrieve.",
              "default": 1000,
              "title": "Limit"
            },
            "description": "How many files to retrieve."
          },
          {
            "name": "order",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Order of files to retrieve (either 'asc' or 'desc').",
              "default": "asc",
              "title": "Order"
            },
            "description": "Order of files to retrieve (either 'asc' or 'desc')."
          },
          {
            "name": "after",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "A cursor for use in pagination. `after` is an object ID that defines your place in the list.",
              "title": "After"
            },
            "description": "A cursor for use in pagination. `after` is an object ID that defines your place in the list."
          },
          {
            "name": "before",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "A cursor for use in pagination. `after` is an object ID that defines your place in the list.",
              "title": "Before"
            },
            "description": "A cursor for use in pagination. `after` is an object ID that defines your place in the list."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AssistantFile"
                  },
                  "title": "Response List Assistant Files V1 Assistants  Assistant Id  Files Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/assistants/{assistant_id}": {
      "get": {
        "tags": [
          "assistants"
        ],
        "summary": "Retrieve Assistant",
        "operationId": "retrieve_assistant_v1_assistants__assistant_id__get",
        "parameters": [
          {
            "name": "assistant_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The unique identifier of the assistant.",
              "title": "Assistant Id"
            },
            "description": "The unique identifier of the assistant."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIAssistant"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "assistants"
        ],
        "summary": "Modify Assistant",
        "operationId": "modify_assistant_v1_assistants__assistant_id__post",
        "parameters": [
          {
            "name": "assistant_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The unique identifier of the assistant.",
              "title": "Assistant Id"
            },
            "description": "The unique identifier of the assistant."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAssistantRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIAssistant"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "assistants"
        ],
        "summary": "Delete Assistant",
        "operationId": "delete_assistant_v1_assistants__assistant_id__delete",
        "parameters": [
          {
            "name": "assistant_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The unique identifier of the assistant.",
              "title": "Assistant Id"
            },
            "description": "The unique identifier of the assistant."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteAssistantResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/assistants/{assistant_id}/files/{file_id}": {
      "get": {
        "tags": [
          "assistants"
        ],
        "summary": "Retrieve Assistant File",
        "operationId": "retrieve_assistant_file_v1_assistants__assistant_id__files__file_id__get",
        "parameters": [
          {
            "name": "assistant_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The unique identifier of the assistant.",
              "title": "Assistant Id"
            },
            "description": "The unique identifier of the assistant."
          },
          {
            "name": "file_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The unique identifier of the file.",
              "title": "File Id"
            },
            "description": "The unique identifier of the file."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssistantFile"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "assistants"
        ],
        "summary": "Delete Assistant File",
        "operationId": "delete_assistant_file_v1_assistants__assistant_id__files__file_id__delete",
        "parameters": [
          {
            "name": "assistant_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The unique identifier of the assistant.",
              "title": "Assistant Id"
            },
            "description": "The unique identifier of the assistant."
          },
          {
            "name": "file_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The unique identifier of the file.",
              "title": "File Id"
            },
            "description": "The unique identifier of the file."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteAssistantFileResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/threads": {
      "post": {
        "tags": [
          "threads"
        ],
        "summary": "Create Thread",
        "operationId": "create_thread_v1_threads_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateThreadRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIThread"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/threads/{thread_id}": {
      "get": {
        "tags": [
          "threads"
        ],
        "summary": "Modify Thread",
        "operationId": "modify_thread_v1_threads__thread_id__get",
        "parameters": [
          {
            "name": "thread_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The unique identifier of the thread.",
              "title": "Thread Id"
            },
            "description": "The unique identifier of the thread."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ModifyThreadRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIThread"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "threads"
        ],
        "summary": "Delete Thread",
        "operationId": "delete_thread_v1_threads__thread_id__delete",
        "parameters": [
          {
            "name": "thread_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The unique identifier of the thread.",
              "title": "Thread Id"
            },
            "description": "The unique identifier of the thread."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteThreadResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/threads/{thread_id}/messages": {
      "post": {
        "tags": [
          "messages"
        ],
        "summary": "Create Message",
        "operationId": "create_message_v1_threads__thread_id__messages_post",
        "parameters": [
          {
            "name": "thread_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The unique identifier of the thread.",
              "title": "Thread Id"
            },
            "description": "The unique identifier of the thread."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateMessageRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIMessage"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "messages"
        ],
        "summary": "List Messages",
        "operationId": "list_messages_v1_threads__thread_id__messages_get",
        "parameters": [
          {
            "name": "thread_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The unique identifier of the thread.",
              "title": "Thread Id"
            },
            "description": "The unique identifier of the thread."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "How many messages to retrieve.",
              "default": 1000,
              "title": "Limit"
            },
            "description": "How many messages to retrieve."
          },
          {
            "name": "order",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Order of messages to retrieve (either 'asc' or 'desc').",
              "default": "asc",
              "title": "Order"
            },
            "description": "Order of messages to retrieve (either 'asc' or 'desc')."
          },
          {
            "name": "after",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "A cursor for use in pagination. `after` is an object ID that defines your place in the list.",
              "title": "After"
            },
            "description": "A cursor for use in pagination. `after` is an object ID that defines your place in the list."
          },
          {
            "name": "before",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "A cursor for use in pagination. `after` is an object ID that defines your place in the list.",
              "title": "Before"
            },
            "description": "A cursor for use in pagination. `after` is an object ID that defines your place in the list."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListMessagesResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/threads/{thread_id}/messages/{message_id}/files/{file_id}": {
      "get": {
        "tags": [
          "messages"
        ],
        "summary": "Retrieve Message File",
        "operationId": "retrieve_message_file_v1_threads__thread_id__messages__message_id__files__file_id__get",
        "parameters": [
          {
            "name": "thread_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The unique identifier of the thread.",
              "title": "Thread Id"
            },
            "description": "The unique identifier of the thread."
          },
          {
            "name": "message_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The unique identifier of the message.",
              "title": "Message Id"
            },
            "description": "The unique identifier of the message."
          },
          {
            "name": "file_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The unique identifier of the file.",
              "title": "File Id"
            },
            "description": "The unique identifier of the file."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageFile"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/threads/{thread_id}/messages/{message_id}": {
      "post": {
        "tags": [
          "messages"
        ],
        "summary": "Modify Message",
        "operationId": "modify_message_v1_threads__thread_id__messages__message_id__post",
        "parameters": [
          {
            "name": "thread_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The unique identifier of the thread.",
              "title": "Thread Id"
            },
            "description": "The unique identifier of the thread."
          },
          {
            "name": "message_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The unique identifier of the message.",
              "title": "Message Id"
            },
            "description": "The unique identifier of the message."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ModifyMessageRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIMessage"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/threads/{thread_id}/runs": {
      "post": {
        "tags": [
          "runs"
        ],
        "summary": "Create Run",
        "operationId": "create_run_v1_threads__thread_id__runs_post",
        "parameters": [
          {
            "name": "thread_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The unique identifier of the thread.",
              "title": "Thread Id"
            },
            "description": "The unique identifier of the thread."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRunRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIRun"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "runs"
        ],
        "summary": "List Runs",
        "operationId": "list_runs_v1_threads__thread_id__runs_get",
        "parameters": [
          {
            "name": "thread_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The unique identifier of the thread.",
              "title": "Thread Id"
            },
            "description": "The unique identifier of the thread."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "How many runs to retrieve.",
              "default": 1000,
              "title": "Limit"
            },
            "description": "How many runs to retrieve."
          },
          {
            "name": "order",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Order of runs to retrieve (either 'asc' or 'desc').",
              "default": "asc",
              "title": "Order"
            },
            "description": "Order of runs to retrieve (either 'asc' or 'desc')."
          },
          {
            "name": "after",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "A cursor for use in pagination. `after` is an object ID that defines your place in the list.",
              "title": "After"
            },
            "description": "A cursor for use in pagination. `after` is an object ID that defines your place in the list."
          },
          {
            "name": "before",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "A cursor for use in pagination. `after` is an object ID that defines your place in the list.",
              "title": "Before"
            },
            "description": "A cursor for use in pagination. `after` is an object ID that defines your place in the list."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OpenAIRun"
                  },
                  "title": "Response List Runs V1 Threads  Thread Id  Runs Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/threads/runs": {
      "post": {
        "tags": [
          "runs"
        ],
        "summary": "Create Thread And Run",
        "operationId": "create_thread_and_run_v1_threads_runs_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateThreadRunRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIRun"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/threads/{thread_id}/runs/{run_id}/steps": {
      "get": {
        "tags": [
          "runs"
        ],
        "summary": "List Run Steps",
        "operationId": "list_run_steps_v1_threads__thread_id__runs__run_id__steps_get",
        "parameters": [
          {
            "name": "thread_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The unique identifier of the thread.",
              "title": "Thread Id"
            },
            "description": "The unique identifier of the thread."
          },
          {
            "name": "run_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The unique identifier of the run.",
              "title": "Run Id"
            },
            "description": "The unique identifier of the run."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "How many run steps to retrieve.",
              "default": 1000,
              "title": "Limit"
            },
            "description": "How many run steps to retrieve."
          },
          {
            "name": "order",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Order of run steps to retrieve (either 'asc' or 'desc').",
              "default": "asc",
              "title": "Order"
            },
            "description": "Order of run steps to retrieve (either 'asc' or 'desc')."
          },
          {
            "name": "after",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "A cursor for use in pagination. `after` is an object ID that defines your place in the list.",
              "title": "After"
            },
            "description": "A cursor for use in pagination. `after` is an object ID that defines your place in the list."
          },
          {
            "name": "before",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "A cursor for use in pagination. `after` is an object ID that defines your place in the list.",
              "title": "Before"
            },
            "description": "A cursor for use in pagination. `after` is an object ID that defines your place in the list."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OpenAIRunStep"
                  },
                  "title": "Response List Run Steps V1 Threads  Thread Id  Runs  Run Id  Steps Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/threads/{thread_id}/runs/{run_id}": {
      "get": {
        "tags": [
          "runs"
        ],
        "summary": "Retrieve Run",
        "operationId": "retrieve_run_v1_threads__thread_id__runs__run_id__get",
        "parameters": [
          {
            "name": "thread_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The unique identifier of the thread.",
              "title": "Thread Id"
            },
            "description": "The unique identifier of the thread."
          },
          {
            "name": "run_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The unique identifier of the run.",
              "title": "Run Id"
            },
            "description": "The unique identifier of the run."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIRun"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "runs"
        ],
        "summary": "Modify Run",
        "operationId": "modify_run_v1_threads__thread_id__runs__run_id__post",
        "parameters": [
          {
            "name": "thread_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The unique identifier of the thread.",
              "title": "Thread Id"
            },
            "description": "The unique identifier of the thread."
          },
          {
            "name": "run_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The unique identifier of the run.",
              "title": "Run Id"
            },
            "description": "The unique identifier of the run."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ModifyRunRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIRun"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/threads/{thread_id}/runs/{run_id}/steps/{step_id}": {
      "get": {
        "tags": [
          "runs"
        ],
        "summary": "Retrieve Run Step",
        "operationId": "retrieve_run_step_v1_threads__thread_id__runs__run_id__steps__step_id__get",
        "parameters": [
          {
            "name": "thread_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The unique identifier of the thread.",
              "title": "Thread Id"
            },
            "description": "The unique identifier of the thread."
          },
          {
            "name": "run_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The unique identifier of the run.",
              "title": "Run Id"
            },
            "description": "The unique identifier of the run."
          },
          {
            "name": "step_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The unique identifier of the run step.",
              "title": "Step Id"
            },
            "description": "The unique identifier of the run step."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIRunStep"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/threads/{thread_id}/runs/{run_id}/submit_tool_outputs": {
      "post": {
        "tags": [
          "runs"
        ],
        "summary": "Submit Tool Outputs To Run",
        "operationId": "submit_tool_outputs_to_run_v1_threads__thread_id__runs__run_id__submit_tool_outputs_post",
        "parameters": [
          {
            "name": "thread_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The unique identifier of the thread.",
              "title": "Thread Id"
            },
            "description": "The unique identifier of the thread."
          },
          {
            "name": "run_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The unique identifier of the run.",
              "title": "Run Id"
            },
            "description": "The unique identifier of the run."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubmitToolOutputsToRunRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIRun"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/threads/{thread_id}/runs/{run_id}/cancel": {
      "post": {
        "tags": [
          "runs"
        ],
        "summary": "Cancel Run",
        "operationId": "cancel_run_v1_threads__thread_id__runs__run_id__cancel_post",
        "parameters": [
          {
            "name": "thread_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The unique identifier of the thread.",
              "title": "Thread Id"
            },
            "description": "The unique identifier of the thread."
          },
          {
            "name": "run_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The unique identifier of the run.",
              "title": "Run Id"
            },
            "description": "The unique identifier of the run."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIRun"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AgentConfigResponse": {
        "properties": {
          "agent_state": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AgentStateModel"
              }
            ],
            "description": "The state of the agent."
          }
        },
        "type": "object",
        "required": [
          "agent_state"
        ],
        "title": "AgentConfigResponse"
      },
      "AgentRenameRequest": {
        "properties": {
          "agent_id": {
            "type": "string",
            "title": "Agent Id",
            "description": "Unique identifier of the agent whose config is requested."
          },
          "agent_name": {
            "type": "string",
            "title": "Agent Name",
            "description": "New name for the agent."
          }
        },
        "type": "object",
        "required": [
          "agent_id",
          "agent_name"
        ],
        "title": "AgentRenameRequest"
      },
      "AgentStateModel": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id",
            "description": "The unique identifier of the agent."
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The name of the agent."
          },
          "user_id": {
            "type": "string",
            "format": "uuid",
            "title": "User Id",
            "description": "The unique identifier of the user associated with the agent."
          },
          "preset": {
            "type": "string",
            "title": "Preset",
            "description": "The preset used by the agent."
          },
          "persona": {
            "type": "string",
            "title": "Persona",
            "description": "The persona used by the agent."
          },
          "human": {
            "type": "string",
            "title": "Human",
            "description": "The human used by the agent."
          },
          "llm_config": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LLMConfigModel"
              }
            ],
            "description": "The LLM configuration used by the agent."
          },
          "embedding_config": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EmbeddingConfigModel"
              }
            ],
            "description": "The embedding configuration used by the agent."
          },
          "state": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "State",
            "description": "The state of the agent."
          },
          "created_at": {
            "type": "integer",
            "title": "Created At",
            "description": "The unix timestamp of when the agent was created."
          }
        },
        "type": "object",
        "required": [
          "id",
          "name",
          "user_id",
          "preset",
          "persona",
          "human",
          "llm_config",
          "embedding_config",
          "created_at"
        ],
        "title": "AgentStateModel"
      },
      "AssistantFile": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id",
            "description": "The unique identifier of the file."
          },
          "object": {
            "type": "string",
            "title": "Object",
            "default": "assistant.file"
          },
          "created_at": {
            "type": "integer",
            "title": "Created At",
            "description": "The unix timestamp of when the file was created."
          },
          "assistant_id": {
            "type": "string",
            "title": "Assistant Id",
            "description": "The unique identifier of the assistant."
          }
        },
        "type": "object",
        "required": [
          "id",
          "created_at",
          "assistant_id"
        ],
        "title": "AssistantFile"
      },
      "AuthRequest": {
        "properties": {
          "password": {
            "type": "string",
            "title": "Password",
            "description": "Admin password provided when starting the MemGPT server"
          }
        },
        "type": "object",
        "title": "AuthRequest"
      },
      "AuthResponse": {
        "properties": {
          "uuid": {
            "type": "string",
            "format": "uuid",
            "title": "Uuid",
            "description": "UUID of the user"
          }
        },
        "type": "object",
        "required": [
          "uuid"
        ],
        "title": "AuthResponse"
      },
      "CommandRequest": {
        "properties": {
          "agent_id": {
            "type": "string",
            "title": "Agent Id",
            "description": "Identifier of the agent on which the command will be executed."
          },
          "command": {
            "type": "string",
            "title": "Command",
            "description": "The command to be executed by the agent."
          }
        },
        "type": "object",
        "required": [
          "agent_id",
          "command"
        ],
        "title": "CommandRequest"
      },
      "CommandResponse": {
        "properties": {
          "response": {
            "type": "string",
            "title": "Response",
            "description": "The result of the executed command."
          }
        },
        "type": "object",
        "required": [
          "response"
        ],
        "title": "CommandResponse"
      },
      "ConfigResponse": {
        "properties": {
          "config": {
            "type": "object",
            "title": "Config",
            "description": "The server configuration object."
          },
          "defaults": {
            "type": "object",
            "title": "Defaults",
            "description": "The defaults for the configuration."
          }
        },
        "type": "object",
        "required": [
          "config",
          "defaults"
        ],
        "title": "ConfigResponse"
      },
      "CoreMemory": {
        "properties": {
          "human": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Human",
            "description": "Human element of the core memory."
          },
          "persona": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Persona",
            "description": "Persona element of the core memory."
          }
        },
        "type": "object",
        "title": "CoreMemory"
      },
      "CreateAPIKeyRequest": {
        "properties": {
          "user_id": {
            "type": "string",
            "title": "User Id",
            "description": "Identifier of the user (UUID)."
          },
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name",
            "description": "Name for the API key (optional)."
          }
        },
        "type": "object",
        "required": [
          "user_id"
        ],
        "title": "CreateAPIKeyRequest"
      },
      "CreateAPIKeyResponse": {
        "properties": {
          "api_key": {
            "type": "string",
            "title": "Api Key",
            "description": "New API key generated."
          }
        },
        "type": "object",
        "required": [
          "api_key"
        ],
        "title": "CreateAPIKeyResponse"
      },
      "CreateAgentRequest": {
        "properties": {
          "config": {
            "type": "object",
            "title": "Config",
            "description": "The agent configuration object."
          }
        },
        "type": "object",
        "required": [
          "config"
        ],
        "title": "CreateAgentRequest"
      },
      "CreateAgentResponse": {
        "properties": {
          "agent_state": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AgentStateModel"
              }
            ],
            "description": "The state of the newly created agent."
          }
        },
        "type": "object",
        "required": [
          "agent_state"
        ],
        "title": "CreateAgentResponse"
      },
      "CreateAssistantFileRequest": {
        "properties": {
          "file_id": {
            "type": "string",
            "title": "File Id",
            "description": "The unique identifier of the file."
          }
        },
        "type": "object",
        "required": [
          "file_id"
        ],
        "title": "CreateAssistantFileRequest"
      },
      "CreateAssistantRequest": {
        "properties": {
          "model": {
            "type": "string",
            "title": "Model",
            "description": "The model to use for the assistant."
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The name of the assistant."
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "The description of the assistant."
          },
          "instructions": {
            "type": "string",
            "title": "Instructions",
            "description": "The instructions for the assistant."
          },
          "tools": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Tools",
            "description": "The tools used by the assistant."
          },
          "file_ids": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "File Ids",
            "description": "List of file IDs associated with the assistant."
          },
          "metadata": {
            "type": "object",
            "title": "Metadata",
            "description": "Metadata associated with the assistant."
          },
          "embedding_model": {
            "type": "string",
            "title": "Embedding Model",
            "description": "The model to use for the assistant."
          }
        },
        "type": "object",
        "required": [
          "model",
          "name",
          "instructions"
        ],
        "title": "CreateAssistantRequest"
      },
      "CreateMessageRequest": {
        "properties": {
          "role": {
            "type": "string",
            "title": "Role",
            "description": "Role of the message sender (either 'user' or 'system')"
          },
          "content": {
            "type": "string",
            "title": "Content",
            "description": "The message content to be processed by the agent."
          },
          "file_ids": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "File Ids",
            "description": "List of file IDs associated with the message."
          },
          "metadata": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Metadata",
            "description": "Metadata associated with the message."
          }
        },
        "type": "object",
        "required": [
          "role",
          "content"
        ],
        "title": "CreateMessageRequest"
      },
      "CreateRunRequest": {
        "properties": {
          "assistant_id": {
            "type": "string",
            "title": "Assistant Id",
            "description": "The unique identifier of the assistant."
          },
          "model": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Model",
            "description": "The model used by the run."
          },
          "instructions": {
            "type": "string",
            "title": "Instructions",
            "description": "The instructions for the run."
          },
          "additional_instructions": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Additional Instructions",
            "description": "Additional instructions for the run."
          },
          "tools": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/ToolCall"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tools",
            "description": "The tools used by the run (overrides assistant)."
          },
          "metadata": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Metadata",
            "description": "Metadata associated with the run."
          }
        },
        "type": "object",
        "required": [
          "assistant_id",
          "instructions"
        ],
        "title": "CreateRunRequest"
      },
      "CreateThreadRequest": {
        "properties": {
          "messages": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Messages",
            "description": "List of message IDs associated with the thread."
          },
          "metadata": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Metadata",
            "description": "Metadata associated with the thread."
          },
          "assistant_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Assistant Name",
            "description": "The name of the assistant (i.e. MemGPT preset)"
          }
        },
        "type": "object",
        "title": "CreateThreadRequest"
      },
      "CreateThreadRunRequest": {
        "properties": {
          "assistant_id": {
            "type": "string",
            "title": "Assistant Id",
            "description": "The unique identifier of the assistant."
          },
          "thread": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OpenAIThread"
              }
            ],
            "description": "The thread to run."
          },
          "model": {
            "type": "string",
            "title": "Model",
            "description": "The model used by the run."
          },
          "instructions": {
            "type": "string",
            "title": "Instructions",
            "description": "The instructions for the run."
          },
          "tools": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/ToolCall"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tools",
            "description": "The tools used by the run (overrides assistant)."
          },
          "metadata": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Metadata",
            "description": "Metadata associated with the run."
          }
        },
        "type": "object",
        "required": [
          "assistant_id",
          "thread",
          "model",
          "instructions"
        ],
        "title": "CreateThreadRunRequest"
      },
      "CreateUserRequest": {
        "properties": {
          "user_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "User Id",
            "description": "Identifier of the user (optional, generated automatically if null)."
          },
          "api_key_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Api Key Name",
            "description": "Name for API key autogenerated on user creation (optional)."
          }
        },
        "type": "object",
        "title": "CreateUserRequest"
      },
      "CreateUserResponse": {
        "properties": {
          "user_id": {
            "type": "string",
            "title": "User Id",
            "description": "Identifier of the user (UUID)."
          },
          "api_key": {
            "type": "string",
            "title": "Api Key",
            "description": "New API key generated for user."
          }
        },
        "type": "object",
        "required": [
          "user_id",
          "api_key"
        ],
        "title": "CreateUserResponse"
      },
      "DeleteAPIKeyResponse": {
        "properties": {
          "message": {
            "type": "string",
            "title": "Message"
          },
          "api_key_deleted": {
            "type": "string",
            "title": "Api Key Deleted"
          }
        },
        "type": "object",
        "required": [
          "message",
          "api_key_deleted"
        ],
        "title": "DeleteAPIKeyResponse"
      },
      "DeleteAssistantFileResponse": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id",
            "description": "The unique identifier of the file."
          },
          "object": {
            "type": "string",
            "title": "Object",
            "default": "assistant.file.deleted"
          },
          "deleted": {
            "type": "boolean",
            "title": "Deleted",
            "description": "Whether the file was deleted."
          }
        },
        "type": "object",
        "required": [
          "id",
          "deleted"
        ],
        "title": "DeleteAssistantFileResponse"
      },
      "DeleteAssistantResponse": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id",
            "description": "The unique identifier of the agent."
          },
          "object": {
            "type": "string",
            "title": "Object",
            "default": "assistant.deleted"
          },
          "deleted": {
            "type": "boolean",
            "title": "Deleted",
            "description": "Whether the agent was deleted."
          }
        },
        "type": "object",
        "required": [
          "id",
          "deleted"
        ],
        "title": "DeleteAssistantResponse"
      },
      "DeleteThreadResponse": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id",
            "description": "The unique identifier of the agent."
          },
          "object": {
            "type": "string",
            "title": "Object",
            "default": "thread.deleted"
          },
          "deleted": {
            "type": "boolean",
            "title": "Deleted",
            "description": "Whether the agent was deleted."
          }
        },
        "type": "object",
        "required": [
          "id",
          "deleted"
        ],
        "title": "DeleteThreadResponse"
      },
      "DeleteUserResponse": {
        "properties": {
          "message": {
            "type": "string",
            "title": "Message"
          },
          "user_id_deleted": {
            "type": "string",
            "title": "User Id Deleted"
          }
        },
        "type": "object",
        "required": [
          "message",
          "user_id_deleted"
        ],
        "title": "DeleteUserResponse"
      },
      "EmbeddingConfigModel": {
        "properties": {
          "embedding_endpoint_type": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Embedding Endpoint Type",
            "default": "openai"
          },
          "embedding_endpoint": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Embedding Endpoint",
            "default": "https://api.openai.com/v1"
          },
          "embedding_model": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Embedding Model",
            "default": "text-embedding-ada-002"
          },
          "embedding_dim": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Embedding Dim",
            "default": 1536
          },
          "embedding_chunk_size": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Embedding Chunk Size",
            "default": 300
          }
        },
        "type": "object",
        "title": "EmbeddingConfigModel"
      },
      "Function": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The name of the function."
          },
          "arguments": {
            "type": "string",
            "title": "Arguments",
            "description": "The arguments of the function."
          }
        },
        "type": "object",
        "required": [
          "name",
          "arguments"
        ],
        "title": "Function"
      },
      "GetAPIKeysResponse": {
        "properties": {
          "api_key_list": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Api Key List",
            "description": "Identifier of the user (UUID)."
          }
        },
        "type": "object",
        "required": [
          "api_key_list"
        ],
        "title": "GetAPIKeysResponse"
      },
      "GetAgentMemoryResponse": {
        "properties": {
          "core_memory": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CoreMemory"
              }
            ],
            "description": "The state of the agent's core memory."
          },
          "recall_memory": {
            "type": "integer",
            "title": "Recall Memory",
            "description": "Size of the agent's recall memory."
          },
          "archival_memory": {
            "type": "integer",
            "title": "Archival Memory",
            "description": "Size of the agent's archival memory."
          }
        },
        "type": "object",
        "required": [
          "core_memory",
          "recall_memory",
          "archival_memory"
        ],
        "title": "GetAgentMemoryResponse"
      },
      "GetAgentMessagesResponse": {
        "properties": {
          "messages": {
            "items": {},
            "type": "array",
            "title": "Messages",
            "description": "List of message objects."
          }
        },
        "type": "object",
        "required": [
          "messages"
        ],
        "title": "GetAgentMessagesResponse"
      },
      "GetAllUsersResponse": {
        "properties": {
          "user_list": {
            "items": {
              "type": "object"
            },
            "type": "array",
            "title": "User List",
            "description": "A list of users."
          }
        },
        "type": "object",
        "required": [
          "user_list"
        ],
        "title": "GetAllUsersResponse"
      },
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "type": "array",
            "title": "Detail"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "ImageFile": {
        "properties": {
          "type": {
            "type": "string",
            "title": "Type",
            "default": "image_file"
          },
          "file_id": {
            "type": "string",
            "title": "File Id"
          }
        },
        "type": "object",
        "required": [
          "file_id"
        ],
        "title": "ImageFile"
      },
      "LLMConfigModel": {
        "properties": {
          "model": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Model",
            "default": "gpt-4"
          },
          "model_endpoint_type": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Model Endpoint Type",
            "default": "openai"
          },
          "model_endpoint": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Model Endpoint",
            "default": "https://api.openai.com/v1"
          },
          "model_wrapper": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Model Wrapper"
          },
          "context_window": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Context Window"
          }
        },
        "type": "object",
        "title": "LLMConfigModel"
      },
      "ListAgentsResponse": {
        "properties": {
          "num_agents": {
            "type": "integer",
            "title": "Num Agents",
            "description": "The number of agents available to the user."
          },
          "agents": {
            "items": {
              "type": "object"
            },
            "type": "array",
            "title": "Agents",
            "description": "List of agent configurations."
          }
        },
        "type": "object",
        "required": [
          "num_agents",
          "agents"
        ],
        "title": "ListAgentsResponse"
      },
      "ListHumansResponse": {
        "properties": {
          "humans": {
            "items": {
              "type": "object"
            },
            "type": "array",
            "title": "Humans",
            "description": "List of human configurations."
          }
        },
        "type": "object",
        "required": [
          "humans"
        ],
        "title": "ListHumansResponse"
      },
      "ListMessagesResponse": {
        "properties": {
          "messages": {
            "items": {
              "$ref": "#/components/schemas/OpenAIMessage"
            },
            "type": "array",
            "title": "Messages",
            "description": "List of message objects."
          }
        },
        "type": "object",
        "required": [
          "messages"
        ],
        "title": "ListMessagesResponse"
      },
      "ListModelsResponse": {
        "properties": {
          "models": {
            "items": {
              "$ref": "#/components/schemas/Model"
            },
            "type": "array",
            "title": "Models",
            "description": "List of model configurations."
          }
        },
        "type": "object",
        "required": [
          "models"
        ],
        "title": "ListModelsResponse"
      },
      "ListPersonasResponse": {
        "properties": {
          "personas": {
            "items": {
              "type": "object"
            },
            "type": "array",
            "title": "Personas",
            "description": "List of persona configurations."
          }
        },
        "type": "object",
        "required": [
          "personas"
        ],
        "title": "ListPersonasResponse"
      },
      "MessageFile": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id",
            "description": "The unique identifier of the file."
          },
          "object": {
            "type": "string",
            "title": "Object",
            "default": "thread.message.file"
          },
          "created_at": {
            "type": "integer",
            "title": "Created At",
            "description": "The unix timestamp of when the file was created."
          },
          "message_id": {
            "type": "string",
            "title": "Message Id",
            "description": "The unique identifier of the message."
          }
        },
        "type": "object",
        "required": [
          "id",
          "created_at",
          "message_id"
        ],
        "title": "MessageFile"
      },
      "MessageRoleType": {
        "type": "string",
        "enum": [
          "user",
          "system"
        ],
        "title": "MessageRoleType"
      },
      "Model": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The name of the model."
          },
          "endpoint": {
            "type": "string",
            "title": "Endpoint",
            "description": "Endpoint URL for the model."
          },
          "endpoint_type": {
            "type": "string",
            "title": "Endpoint Type",
            "description": "Type of the model endpoint."
          },
          "wrapper": {
            "type": "string",
            "title": "Wrapper",
            "description": "Wrapper used for the model."
          },
          "context_window": {
            "type": "integer",
            "title": "Context Window",
            "description": "Context window size for the model."
          }
        },
        "type": "object",
        "required": [
          "name",
          "endpoint",
          "endpoint_type",
          "context_window"
        ],
        "title": "Model"
      },
      "ModifyMessageRequest": {
        "properties": {
          "metadata": {
            "type": "object",
            "title": "Metadata",
            "description": "Metadata associated with the message."
          }
        },
        "type": "object",
        "title": "ModifyMessageRequest"
      },
      "ModifyRunRequest": {
        "properties": {
          "metadata": {
            "type": "object",
            "title": "Metadata",
            "description": "Metadata associated with the run."
          }
        },
        "type": "object",
        "title": "ModifyRunRequest"
      },
      "ModifyThreadRequest": {
        "properties": {
          "metadata": {
            "type": "object",
            "title": "Metadata",
            "description": "Metadata associated with the thread."
          }
        },
        "type": "object",
        "title": "ModifyThreadRequest"
      },
      "OpenAIAssistant": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id",
            "description": "The unique identifier of the assistant."
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The name of the assistant."
          },
          "object": {
            "type": "string",
            "title": "Object",
            "default": "assistant"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description",
            "description": "The description of the assistant."
          },
          "created_at": {
            "type": "integer",
            "title": "Created At",
            "description": "The unix timestamp of when the assistant was created."
          },
          "model": {
            "type": "string",
            "title": "Model",
            "description": "The model used by the assistant."
          },
          "instructions": {
            "type": "string",
            "title": "Instructions",
            "description": "The instructions for the assistant."
          },
          "tools": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tools",
            "description": "The tools used by the assistant."
          },
          "file_ids": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "File Ids",
            "description": "List of file IDs associated with the assistant."
          },
          "metadata": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Metadata",
            "description": "Metadata associated with the assistant."
          }
        },
        "type": "object",
        "required": [
          "id",
          "name",
          "created_at",
          "model",
          "instructions"
        ],
        "title": "OpenAIAssistant",
        "description": "Represents an OpenAI assistant (equivalent to MemGPT preset)"
      },
      "OpenAIError": {
        "properties": {
          "code": {
            "type": "string",
            "title": "Code",
            "description": "The error code."
          },
          "message": {
            "type": "string",
            "title": "Message",
            "description": "The error message."
          }
        },
        "type": "object",
        "required": [
          "code",
          "message"
        ],
        "title": "OpenAIError"
      },
      "OpenAIMessage": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id",
            "description": "The unique identifier of the message."
          },
          "object": {
            "type": "string",
            "title": "Object",
            "default": "thread.message"
          },
          "created_at": {
            "type": "integer",
            "title": "Created At",
            "description": "The unix timestamp of when the message was created."
          },
          "thread_id": {
            "type": "string",
            "title": "Thread Id",
            "description": "The unique identifier of the thread."
          },
          "role": {
            "type": "string",
            "title": "Role",
            "description": "Role of the message sender (either 'user' or 'system')"
          },
          "content": {
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/Text"
                },
                {
                  "$ref": "#/components/schemas/ImageFile"
                }
              ]
            },
            "type": "array",
            "title": "Content",
            "description": "The message content to be processed by the agent."
          },
          "assistant_id": {
            "type": "string",
            "title": "Assistant Id",
            "description": "The unique identifier of the assistant."
          },
          "run_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Run Id",
            "description": "The unique identifier of the run."
          },
          "file_ids": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "File Ids",
            "description": "List of file IDs associated with the message."
          },
          "metadata": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Metadata",
            "description": "Metadata associated with the message."
          }
        },
        "type": "object",
        "required": [
          "id",
          "created_at",
          "thread_id",
          "role",
          "assistant_id"
        ],
        "title": "OpenAIMessage"
      },
      "OpenAIMessageCreationStep": {
        "properties": {
          "type": {
            "type": "string",
            "title": "Type",
            "default": "message_creation"
          },
          "message_id": {
            "type": "string",
            "title": "Message Id",
            "description": "The unique identifier of the message."
          }
        },
        "type": "object",
        "required": [
          "message_id"
        ],
        "title": "OpenAIMessageCreationStep"
      },
      "OpenAIRun": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id",
            "description": "The unique identifier of the run."
          },
          "object": {
            "type": "string",
            "title": "Object",
            "default": "thread.run"
          },
          "created_at": {
            "type": "integer",
            "title": "Created At",
            "description": "The unix timestamp of when the run was created."
          },
          "thread_id": {
            "type": "string",
            "title": "Thread Id",
            "description": "The unique identifier of the thread."
          },
          "assistant_id": {
            "type": "string",
            "title": "Assistant Id",
            "description": "The unique identifier of the assistant."
          },
          "status": {
            "type": "string",
            "title": "Status",
            "description": "The status of the run."
          },
          "required_action": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/RequiredAction"
              },
              {
                "type": "null"
              }
            ],
            "description": "The required action of the run."
          },
          "last_error": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/OpenAIError"
              },
              {
                "type": "null"
              }
            ],
            "description": "The last error of the run."
          },
          "expires_at": {
            "type": "integer",
            "title": "Expires At",
            "description": "The unix timestamp of when the run expires."
          },
          "started_at": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Started At",
            "description": "The unix timestamp of when the run started."
          },
          "cancelled_at": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Cancelled At",
            "description": "The unix timestamp of when the run was cancelled."
          },
          "failed_at": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Failed At",
            "description": "The unix timestamp of when the run failed."
          },
          "completed_at": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Completed At",
            "description": "The unix timestamp of when the run completed."
          },
          "model": {
            "type": "string",
            "title": "Model",
            "description": "The model used by the run."
          },
          "instructions": {
            "type": "string",
            "title": "Instructions",
            "description": "The instructions for the run."
          },
          "tools": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/ToolCall"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tools",
            "description": "The tools used by the run."
          },
          "file_ids": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "File Ids",
            "description": "List of file IDs associated with the run."
          },
          "metadata": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Metadata",
            "description": "Metadata associated with the run."
          },
          "usage": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/OpenAIUsage"
              },
              {
                "type": "null"
              }
            ],
            "description": "The usage of the run."
          }
        },
        "type": "object",
        "required": [
          "id",
          "created_at",
          "thread_id",
          "assistant_id",
          "status",
          "expires_at",
          "model",
          "instructions"
        ],
        "title": "OpenAIRun"
      },
      "OpenAIRunStep": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id",
            "description": "The unique identifier of the run step."
          },
          "object": {
            "type": "string",
            "title": "Object",
            "default": "thread.run.step"
          },
          "created_at": {
            "type": "integer",
            "title": "Created At",
            "description": "The unix timestamp of when the run step was created."
          },
          "assistant_id": {
            "type": "string",
            "title": "Assistant Id",
            "description": "The unique identifier of the assistant."
          },
          "thread_id": {
            "type": "string",
            "title": "Thread Id",
            "description": "The unique identifier of the thread."
          },
          "run_id": {
            "type": "string",
            "title": "Run Id",
            "description": "The unique identifier of the run."
          },
          "type": {
            "type": "string",
            "title": "Type",
            "description": "The type of the run step."
          },
          "status": {
            "type": "string",
            "title": "Status",
            "description": "The status of the run step."
          },
          "step_defaults": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/OpenAIToolCallsStep"
              },
              {
                "$ref": "#/components/schemas/OpenAIMessageCreationStep"
              }
            ],
            "title": "Step Defaults",
            "description": "The step defaults."
          },
          "last_error": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/OpenAIError"
              },
              {
                "type": "null"
              }
            ],
            "description": "The last error of the run step."
          },
          "expired_at": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Expired At",
            "description": "The unix timestamp of when the run step expired."
          },
          "failed_at": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Failed At",
            "description": "The unix timestamp of when the run failed."
          },
          "completed_at": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Completed At",
            "description": "The unix timestamp of when the run completed."
          },
          "usage": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/OpenAIUsage"
              },
              {
                "type": "null"
              }
            ],
            "description": "The usage of the run."
          }
        },
        "type": "object",
        "required": [
          "id",
          "created_at",
          "assistant_id",
          "thread_id",
          "run_id",
          "type",
          "status",
          "step_defaults"
        ],
        "title": "OpenAIRunStep"
      },
      "OpenAIThread": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id",
            "description": "The unique identifier of the thread."
          },
          "object": {
            "type": "string",
            "title": "Object",
            "default": "thread"
          },
          "created_at": {
            "type": "integer",
            "title": "Created At",
            "description": "The unix timestamp of when the thread was created."
          },
          "metadata": {
            "type": "object",
            "title": "Metadata",
            "description": "Metadata associated with the thread."
          }
        },
        "type": "object",
        "required": [
          "id",
          "created_at"
        ],
        "title": "OpenAIThread",
        "description": "Represents an OpenAI thread (equivalent to MemGPT agent)"
      },
      "OpenAIToolCallsStep": {
        "properties": {
          "type": {
            "type": "string",
            "title": "Type",
            "default": "tool_calls"
          },
          "tool_calls": {
            "items": {
              "$ref": "#/components/schemas/ToolCall"
            },
            "type": "array",
            "title": "Tool Calls",
            "description": "The tool calls."
          }
        },
        "type": "object",
        "required": [
          "tool_calls"
        ],
        "title": "OpenAIToolCallsStep"
      },
      "OpenAIUsage": {
        "properties": {
          "completion_tokens": {
            "type": "integer",
            "title": "Completion Tokens",
            "description": "The number of tokens used for the run."
          },
          "prompt_tokens": {
            "type": "integer",
            "title": "Prompt Tokens",
            "description": "The number of tokens used for the prompt."
          },
          "total_tokens": {
            "type": "integer",
            "title": "Total Tokens",
            "description": "The total number of tokens used for the run."
          }
        },
        "type": "object",
        "required": [
          "completion_tokens",
          "prompt_tokens",
          "total_tokens"
        ],
        "title": "OpenAIUsage"
      },
      "RequiredAction": {
        "properties": {
          "type": {
            "type": "string",
            "title": "Type",
            "default": "submit_tool_outputs"
          },
          "submit_tool_outputs": {
            "items": {
              "$ref": "#/components/schemas/ToolCall"
            },
            "type": "array",
            "title": "Submit Tool Outputs"
          }
        },
        "type": "object",
        "required": [
          "submit_tool_outputs"
        ],
        "title": "RequiredAction"
      },
      "SubmitToolOutputsToRunRequest": {
        "properties": {
          "tools_outputs": {
            "items": {
              "$ref": "#/components/schemas/ToolCallOutput"
            },
            "type": "array",
            "title": "Tools Outputs",
            "description": "The tool outputs to submit."
          }
        },
        "type": "object",
        "required": [
          "tools_outputs"
        ],
        "title": "SubmitToolOutputsToRunRequest"
      },
      "Text": {
        "properties": {
          "object": {
            "type": "string",
            "title": "Object",
            "default": "text"
          },
          "text": {
            "type": "string",
            "title": "Text",
            "description": "The text content to be processed by the agent."
          }
        },
        "type": "object",
        "required": [
          "text"
        ],
        "title": "Text"
      },
      "ToolCall": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id",
            "description": "The unique identifier of the tool call."
          },
          "type": {
            "type": "string",
            "title": "Type",
            "default": "function"
          },
          "function": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Function"
              }
            ],
            "description": "The function call."
          }
        },
        "type": "object",
        "required": [
          "id",
          "function"
        ],
        "title": "ToolCall"
      },
      "ToolCallOutput": {
        "properties": {
          "tool_call_id": {
            "type": "string",
            "title": "Tool Call Id",
            "description": "The unique identifier of the tool call."
          },
          "output": {
            "type": "string",
            "title": "Output",
            "description": "The output of the tool call."
          }
        },
        "type": "object",
        "required": [
          "tool_call_id",
          "output"
        ],
        "title": "ToolCallOutput"
      },
      "UpdateAgentMemoryRequest": {
        "properties": {
          "agent_id": {
            "type": "string",
            "title": "Agent Id",
            "description": "The unique identifier of the agent."
          },
          "human": {
            "type": "string",
            "title": "Human",
            "description": "Human element of the core memory."
          },
          "persona": {
            "type": "string",
            "title": "Persona",
            "description": "Persona element of the core memory."
          }
        },
        "type": "object",
        "required": [
          "agent_id"
        ],
        "title": "UpdateAgentMemoryRequest"
      },
      "UpdateAgentMemoryResponse": {
        "properties": {
          "old_core_memory": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CoreMemory"
              }
            ],
            "description": "The previous state of the agent's core memory."
          },
          "new_core_memory": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CoreMemory"
              }
            ],
            "description": "The updated state of the agent's core memory."
          }
        },
        "type": "object",
        "required": [
          "old_core_memory",
          "new_core_memory"
        ],
        "title": "UpdateAgentMemoryResponse"
      },
      "UserMessageRequest": {
        "properties": {
          "agent_id": {
            "type": "string",
            "title": "Agent Id",
            "description": "The unique identifier of the agent."
          },
          "message": {
            "type": "string",
            "title": "Message",
            "description": "The message content to be processed by the agent."
          },
          "stream": {
            "type": "boolean",
            "title": "Stream",
            "description": "Flag to determine if the response should be streamed. Set to True for streaming.",
            "default": false
          },
          "role": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MessageRoleType"
              }
            ],
            "description": "Role of the message sender (either 'user' or 'system')",
            "default": "user"
          }
        },
        "type": "object",
        "required": [
          "agent_id",
          "message"
        ],
        "title": "UserMessageRequest"
      },
      "UserMessageResponse": {
        "properties": {
          "messages": {
            "items": {
              "type": "object"
            },
            "type": "array",
            "title": "Messages",
            "description": "List of messages generated by the agent in response to the received message."
          }
        },
        "type": "object",
        "required": [
          "messages"
        ],
        "title": "UserMessageResponse"
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "type": "array",
            "title": "Location"
          },
          "msg": {
            "type": "string",
            "title": "Message"
          },
          "type": {
            "type": "string",
            "title": "Error Type"
          }
        },
        "type": "object",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "title": "ValidationError"
      }
    },
    "securitySchemes": {
      "HTTPBearer": {
        "type": "http",
        "scheme": "bearer"
      }
    }
  },
  "servers": [
    {
      "url": "http://localhost:8283"
    }
  ]
}